from aiogram.types import Message

from API_TOKEN import API_TOKEN
import texts

import asyncio
import logging

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher()


@dp.message(Command('start', 'menu'))
async def start(message: types.Message):
    keyboard = [
        [
            types.KeyboardButton(text='–°—Ç–∏–ø–µ–Ω–¥–∏–∏ üí∞'),
            types.KeyboardButton(text='–ü–µ—Ä–µ—Ö–æ–¥ —Å –ø–ª–∞—Ç–∫–∏ üìö'),
        ],
        [
            types.KeyboardButton(text='–°—Ç—É–¥–ø—Ä–æ—Ñ–∫–æ–º üíº'),
            types.KeyboardButton(text='–¶–µ–Ω—Ç—Ä –∫–∞—Ä—å–µ—Ä—ã üîç'),
        ],
        [
            types.KeyboardButton(text='–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚úèÔ∏è'),
            types.KeyboardButton(text='–ó–∞–ø–∏—Å—å –Ω–∞ –§–ó–ö üèÄ'),
        ],
        [
            types.KeyboardButton(text='–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª—É–± ¬´–õ–∏—Ñ—Ç¬ª üöÄ'),
        ],
        [
            types.KeyboardButton(text='–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–æ–≤–µ—Ç —É—á–∞—â–∏—Ö—Å—è üë•üí¨'),
        ]
    ]

    reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True,
                                             input_field_placeholder='–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª')
    if message.text == '/start':
        await message.answer(texts.hello + "\n" + texts.action, reply_markup=reply_markup)
    else:
        await message.answer(texts.action, reply_markup=reply_markup)


@dp.message(F.text)
async def stud(message: types.Message):
    keyboard = [[types.InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥', callback_data='menu_stud')]]
    reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)

    if message.text == '–ü–µ—Ä–µ—Ö–æ–¥ —Å –ø–ª–∞—Ç–∫–∏ üìö':
        await message.answer(text=texts.become_free, reply_markup=reply_markup)

    elif message.text == '–°—Ç—É–¥–ø—Ä–æ—Ñ–∫–æ–º üíº':
        await message.answer(text=texts.studprofcom, reply_markup=reply_markup)

    elif message.text == '–¶–µ–Ω—Ç—Ä –∫–∞—Ä—å–µ—Ä—ã üîç':
        await message.answer(text=texts.career, reply_markup=reply_markup)

    elif message.text == '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚úèÔ∏è':
        await message.answer(text=texts.homework, reply_markup=reply_markup)

    elif message.text == '–ó–∞–ø–∏—Å—å –Ω–∞ –§–ó–ö üèÄ':
        await message.answer(text=texts.phys_ed, reply_markup=reply_markup)

    elif message.text == '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª—É–± ¬´–õ–∏—Ñ—Ç¬ª üöÄ':
        await message.answer(text=texts.education, reply_markup=reply_markup)

    elif message.text == '–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–æ–≤–µ—Ç —É—á–∞—â–∏—Ö—Å—è üë•üí¨':
        await message.answer(text=texts.oso, reply_markup=reply_markup)

    else:
        keyboard = [
            [types.InlineKeyboardButton(text='–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è', callback_data='st_acad')],
            [types.InlineKeyboardButton(text='–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è', callback_data='st_acad_pow')],
            [types.InlineKeyboardButton(text='–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è', callback_data='st_gov')],
            [types.InlineKeyboardButton(text='–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è 1-2 –∫—É—Ä—Å–æ–≤ (—Å—Ç–∏–º—É–ª–∏—Ä—É—é—â–∞—è –≤—ã–ø–ª–∞—Ç–∞)',
                                        callback_data='st_gov_plus')],
            [types.InlineKeyboardButton(text='–°—Ç–∏–ø–µ–Ω–¥–∏–∏ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§', callback_data='st_prez')],
            [types.InlineKeyboardButton(text='–ò–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏', callback_data='st_named')],
            [types.InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥', callback_data='menu_stud')],
        ]

        reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)
        await message.answer(text='–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è —Å—Ç–∏–ø–µ–Ω–¥–∏—é –∏ —è –æ –Ω–µ–π —Ä–∞—Å—Å–∫–∞–∂—É', reply_markup=reply_markup)


@dp.callback_query(F.data)
async def st(callback: types.CallbackQuery):
    keyboard = [[types.InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥', callback_data='st')]]
    reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)
    await callback.answer()

    if callback.data == 'st_named':
        await callback.message.edit_text(text=f'<b>–ò–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏</b>', reply_markup=None)
        await callback.message.answer(text=texts.st_named, reply_markup=reply_markup)

    elif callback.data == 'st_acad':
        await callback.message.edit_text(text=f'<b>–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è</b>', reply_markup=None)
        await callback.message.answer(text=texts.st_acad, reply_markup=reply_markup)

    elif callback.data == 'st_acad_pow':
        await callback.message.edit_text(text=f'<b>–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è</b>', reply_markup=None)
        await callback.message.answer(text=texts.st_acad_pow, reply_markup=reply_markup)

    elif callback.data == 'st_gov':
        await callback.message.edit_text(text=f'<b>–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è</b>', reply_markup=None)
        await callback.message.answer(text=texts.st_gov, reply_markup=reply_markup)

    elif callback.data == 'st_gov_plus':
        await callback.message.edit_text(text=f'<b>–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è 1-2 –∫—É—Ä—Å–æ–≤ (—Å—Ç–∏–º—É–ª–∏—Ä—É—é—â–∞—è –≤—ã–ø–ª–∞—Ç–∞)</b>', reply_markup=None)
        await callback.message.answer(text=texts.st_gov_plus, reply_markup=reply_markup)

    elif callback.data == 'st_prez':
        await callback.message.edit_text(text=f'<b>–°—Ç–∏–ø–µ–Ω–¥–∏–∏ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§</b>', reply_markup=None)
        await callback.message.answer(text=texts.st_prez, reply_markup=reply_markup)

    elif callback.data == 'menu_stud':
        await callback.message.edit_reply_markup(reply_markup=None)
        await start(callback.message)

    elif callback.data == 'st':
        await callback.message.edit_reply_markup(reply_markup=None)
        await stud(callback.message)


"""@dp.message(F.photo)
async def get_photo_id(message: types.Message):
    print(message.photo[-1].file_id)"""


"""@dp.message()
async def get_doc_id(message: types.Message):
    print(message.document.file_id)"""


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
