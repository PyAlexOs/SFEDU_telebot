from API_TOKEN import API_TOKEN
import texts

import asyncio
import logging

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, Text
from aiogram.utils.keyboard import InlineKeyboardBuilder

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher()


@dp.message(Command('start', 'role'))
async def start(message: types.Message):
    if message.text == '/start':
        await message.answer(texts.hello)

    keyboard = [[
        types.KeyboardButton(text='–î–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ üéí'),
        types.KeyboardButton(text='–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ üéì')
    ]]

    reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True,
                                             input_field_placeholder='–ü–æ–¥—Å–∫–∞–∂–∏, –∫—Ç–æ —Ç—ã?')
    await message.answer('–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—ã —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å?', reply_markup=reply_markup)


@dp.message(Text('–î–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ üéí'))
async def menu_abit(message: types.Message):
    keyboard = [
        [
            types.KeyboardButton(text='–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ üìÑ'),
            types.KeyboardButton(text='–û–±—â–µ–∂–∏—Ç–∏—è üè†'),
        ],
        [
            types.KeyboardButton(text='–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ üëâ'),
            types.KeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ ‚òéÔ∏è'),
        ]
    ]

    reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True,
                                             input_field_placeholder='–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª')
    await message.answer(texts.okay, reply_markup=reply_markup)


@dp.message(Text('–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ üéì'))
async def menu_stud(message: types.Message):
    keyboard = [
        [
            types.KeyboardButton(text='–°—Ç–∏–ø–µ–Ω–¥–∏–∏ üí∞'),
            types.KeyboardButton(text='–ü–µ—Ä–µ—Ö–æ–¥ —Å –ø–ª–∞—Ç–∫–∏ üìö'),
        ],
        [
            types.KeyboardButton(text='–°—Ç—É–¥–ø—Ä–æ—Ñ–∫–æ–º üíº'),
            types.KeyboardButton(text='–¶–µ–Ω—Ç—Ä –∫–∞—Ä—å–µ—Ä—ã üîç'),
        ],
        [
            types.KeyboardButton(text='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üîë'),
            types.KeyboardButton(text='–ó–∞–ø–∏—Å—å –Ω–∞ –§–ó–ö üèÄ'),
        ],
        [
            types.KeyboardButton(text='–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–æ–≤–µ—Ç —É—á–∞—â–∏—Ö—Å—è üë•üí¨'),
        ]
    ]

    reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True,
                                             input_field_placeholder='–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª')
    await message.answer(texts.okay, reply_markup=reply_markup)


@dp.message(Text('–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ üìÑ'))
@dp.message(Text('–û–±—â–µ–∂–∏—Ç–∏—è üè†'))
@dp.message(Text('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ üëâ'))
@dp.message(Text('–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ ‚òéÔ∏è'))
async def abit(message: types.Message):
    text = ''
    keyboard = [[types.InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥', callback_data='menu_abit')]]
    reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)

    if message.text == '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ üëâ':
        text = texts.directions

    if message.text == '–û–±—â–µ–∂–∏—Ç–∏—è üè†':
        text = texts.hostel

    elif message.text == '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ üìÑ':
        text = texts.entrance

    elif message.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ ‚òéÔ∏è':
        text = texts.comission

    await message.answer(text=text, reply_markup=reply_markup)


@dp.message(Text('–ü–µ—Ä–µ—Ö–æ–¥ —Å –ø–ª–∞—Ç–∫–∏ üìö'))
@dp.message(Text('–°—Ç—É–¥–ø—Ä–æ—Ñ–∫–æ–º üíº'))
@dp.message(Text('–¶–µ–Ω—Ç—Ä –∫–∞—Ä—å–µ—Ä—ã üîç'))
@dp.message(Text('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üîë'))
@dp.message(Text('–ó–∞–ø–∏—Å—å –Ω–∞ –§–ó–ö üèÄ'))
@dp.message(Text('–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–æ–≤–µ—Ç —É—á–∞—â–∏—Ö—Å—è üë•üí¨'))
async def stud(message: types.Message):
    keyboard = [[types.InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥', callback_data='menu_stud')]]
    reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)

    if message.text == '–ü–µ—Ä–µ—Ö–æ–¥ —Å –ø–ª–∞—Ç–∫–∏ üìö':
        text = texts.become_free
        file = 'BQACAgIAAxkBAAIFOGRhRWXeQ-DM_rFLLxly6iGHoksbAAJ-MAACzgwJS7KAwbbVesiqLwQ'
        await message.answer_document(file)
        await message.answer(text=text, reply_markup=reply_markup)

    elif message.text == '–°—Ç—É–¥–ø—Ä–æ—Ñ–∫–æ–º üíº':
        text = texts.studprofcom
        await message.answer(text=text, reply_markup=reply_markup)

    elif message.text == '–¶–µ–Ω—Ç—Ä –∫–∞—Ä—å–µ—Ä—ã üîç':
        text = texts.career
        await message.answer(text=text, reply_markup=reply_markup)

    elif message.text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üîë':
        text = texts.lk
        photos = [
            types.InputMediaPhoto(
                media='AgACAgIAAxkBAAIFVWRhR0e4w2zYB14ZfJkkA5sYT1IYAAIczTEbzgwJS9dKTqpYROf0AQADAgADeQADLwQ'),
            types.InputMediaPhoto(
                media='AgACAgIAAxkBAAIFVmRhR04al8KY1HMkzyiIiaWnUmAjAAIdzTEbzgwJSxWTCRhseLmRAQADAgADeQADLwQ')
        ]

        await message.answer_media_group(photos)
        await message.answer(text=text, reply_markup=reply_markup)

    elif message.text == '–ó–∞–ø–∏—Å—å –Ω–∞ –§–ó–ö üèÄ':
        text = texts.phys_ed
        photo = 'AgACAgIAAxkBAAIFV2RhR1Lr-Mk5AAF3SLjBPwgXZCwj5wACHs0xG84MCUsQpYTDJJyyUAEAAwIAA3kAAy8E'
        await message.answer_photo(photo=photo, caption=text, reply_markup=reply_markup)

    elif message.text == '–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–æ–≤–µ—Ç —É—á–∞—â–∏—Ö—Å—è üë•üí¨':
        text = texts.oso
        await message.answer(text=text, reply_markup=reply_markup)


@dp.message(Text('–°—Ç–∏–ø–µ–Ω–¥–∏–∏ üí∞'))
async def get_money(message: types.Message):
    keyboard = [
        [types.InlineKeyboardButton(text='–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è', callback_data='st_acad')],
        [types.InlineKeyboardButton(text='–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è', callback_data='st_acad_pow')],
        [types.InlineKeyboardButton(text='–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è', callback_data='st_gov')],
        [types.InlineKeyboardButton(text='–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è 1-2 –∫—É—Ä—Å–æ–≤ (—Å—Ç–∏–º—É–ª–∏—Ä—É—é—â–∞—è –≤—ã–ø–ª–∞—Ç–∞)',
                                    callback_data='st_gov_plus')],
        [types.InlineKeyboardButton(text='–°—Ç–∏–ø–µ–Ω–¥–∏–∏ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§', callback_data='st_prez')],
        [types.InlineKeyboardButton(text='–ò–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏', callback_data='st_named')],
        [types.InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥', callback_data='menu_stud')],
    ]

    reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)
    await message.answer(text='–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è —Å—Ç–∏–ø–µ–Ω–¥–∏—é –∏ —è –æ –Ω–µ–π —Ä–∞—Å—Å–∫–∞–∂—É', reply_markup=reply_markup)


@dp.callback_query(Text("st_acad"))
@dp.callback_query(Text("st_acad_pow"))
@dp.callback_query(Text("st_gov"))
@dp.callback_query(Text("st_gov_plus"))
@dp.callback_query(Text("st_prez"))
@dp.callback_query(Text("st_named"))
async def redirect(callback: types.CallbackQuery):
    text, header = '', ''
    keyboard = [[types.InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥', callback_data='st')]]
    reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)
    await callback.answer()

    if callback.data == 'st_named':
        await callback.message.edit_text(text='<b>–ò–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏</b>', reply_markup=None)

        files = [
            types.InputMediaDocument(
                media='BQACAgIAAxkBAAIHbWRhZ2htrznZOSEdaqanv9EdBUSpAALCMAACzgwJS1Yv-LFVQgfaLwQ'),
            types.InputMediaDocument(
                media='BQACAgIAAxkBAAIHbmRhZ3RUJIWnzDjFGjihrmZKKq-fAALDMAACzgwJS7Qsh4cC56LJLwQ')
        ]

        await callback.message.answer_media_group(files)
        await callback.message.answer(text=texts.st_named, reply_markup=reply_markup)

    else:
        if callback.data == 'st_acad':
            header = '–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è'
            text = texts.st_acad

        elif callback.data == 'st_acad_pow':
            header = '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è'
            text = texts.st_acad_pow

        elif callback.data == 'st_gov':
            header = '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è'
            text = texts.st_gov

        elif callback.data == 'st_gov_plus':
            header = '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è 1-2 –∫—É—Ä—Å–æ–≤ (—Å—Ç–∏–º—É–ª–∏—Ä—É—é—â–∞—è –≤—ã–ø–ª–∞—Ç–∞)'
            text = texts.st_gov_plus

        elif callback.data == 'st_prez':
            header = '–°—Ç–∏–ø–µ–Ω–¥–∏–∏ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§'
            text = texts.st_prez

        await callback.message.edit_text(text=f'<b>{header}</b>', reply_markup=None)
        await callback.message.answer(text=text, reply_markup=reply_markup)


@dp.callback_query(Text("menu_stud"))
@dp.callback_query(Text("menu_abit"))
@dp.callback_query(Text("st"))
async def redirect(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    if callback.data == 'menu_abit':
        await menu_abit(callback.message)

    elif callback.data == 'menu_stud':
        await menu_stud(callback.message)

    elif callback.data == 'st':
        await get_money(callback.message)


"""@dp.message(F.photo)
async def get_photo_id(message: types.Message):
    print(message.photo[-1].file_id)"""


"""@dp.message()
async def get_doc_id(message: types.Message):
    print(message.document.file_id)"""


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
